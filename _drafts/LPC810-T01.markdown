---
layout: tutorial
title: Getting Started With LPC810 Cortex-M0+ Microcontroller from Scratch
categories: tutorials
date: 0000-01-01
tags: tutorial Cortex-M0+ ARM
---
{% assign code_root = 'repo/01-Getting_Started' %}

**Disclaimer: I am no ARM programming expert, and I myself am experimenting with all the things described in this series of, "tutorials". Therefore, I might be totally wrong in reasoning, but the code should be usable.**

# What this (series) is about?
I am currently experimenting with the LPC810 chip on Linux using the GCC toolchain. This is more like a progress of my experiment, but I hope it will help others. Actually it is more about compiler and linker than about embedded programming, because honestly, I don't have any problem on general purpose embedded programming since I have prior experience using AVR and STM32 *with preexisting libraries* such as *AVR-LibC* or *STM32 Standard Peripheral Library*. However, this time I am going to start from scratch. Which means, starting from assembly, linker scripts, startup code, etc. Since I can't find any "standard" NXP LPC810 C headers, I will write my own.

# The LPC810
More specifically, the [**LPC810M021FN8**](http://www.nxp.com/products/microcontrollers/cortex_m0_m0/lpc800/LPC810M021FN8.html), is a small ARM Cortex-M0+ chip with 4kB flash and 1kB SRAM. Not much, right? However, the best part is that it comes as a DIP-8 package, which means you can plug it right to a breadboard and start experimenting. Also, it is amazingly cheap comparing to other ARM chips: as of the date of writing, 2014-11-27, the price on [Mouser](http://mouser.com) is $2.41.

This chip does have a lot of limitations though. The one biggest down side for me is that it doesn't come with Analog-Digital Converter. It does have two Analog-Digital Comparater, though. The next obvious reason is that there are only 6 GPIOs, where one is taken by _RESET_(PIO0_5), and two are not enabled by default(PIO0\_2 and PIO0\_3, taken by SWD interface). However, this chip should be enough to experiment with ARM Startup and linker scripts and other good stuff.

**Disclaimer again: I am only starting to experiment with compilers/linker scripts, so I write terrible linker scripts. I miss multiple sections because I don't know what they do. As of the time I write this post, I only have the .text, .data, .bss section written because I don't understand what everything else are.**

# Reader assumptions
- Can use GNU/Linux (I am using GNU/Linux to do everything. Probably works on Windows, but need extra knowledge).
- Knows basic assembly (Sorry, I am not good enough to teach this).
- Knows basic C (I can talk about this, though)
- At least programmed some embedded device before(like 8051 or AVR)
- Knows how to read datasheet
- Knows how to wire up a breadboard *without* a photo or schematic (I admit I am just lazy. The circuit is too simple anyway).

# What you will need
- An **LPC810** chip. Here I am using **LPC810M021FN8**.
- A TTL-USB cable, 3.3V.
- A piece of breadboard.
- An indicator LED rated around $$10mA$$ (Or, just a random small 3mm/5mm LED).
- A resistor around $$330\Omega$$.
- At least one pushbutton.
- [LPC81xM Datasheet](http://www.nxp.com/documents/data_sheet/LPC81XM.pdf)
- [LPC81x User Manual](http://www.nxp.com/documents/user_manual/UM10601.pdf)
- [Cortex-M0+ Devices Generic User Guide](http://infocenter.arm.com/help/topic/com.arm.doc.dui0662b/DUI0662B_cortex_m0p_r0p1_dgug.pdf)
- ARM Toolchain. If you don't have experience, get a precompiled one. I have several experience that when I compile my own and encountered some unsolvable problems, simply changing the toolchain fixed the problem. Try the gcc-arm on Ubuntu/Debian or the CodeSourcery toolchain.
- [lpc21isp](http://sourceforge.net/projects/lpc21isp/). The downloader.

# Hardware Wireup
Wire the 3.3V to Pin 6(Vdd) of the LPC810. Connect ground to Pin 7(Vss).

Connect Pin 5 to ground through a pushbutton. When Pin 5 is pulled down(i.e. the pushbutton is being pressed) during reset, chip enters ISP command handler, and can be programmed.

Connect Pin 4(PIO0_2) to LED, series with resistor to ground. Pin 2 is the TXD in ISP mode, Pin 8 is the RXD in ISP mode. Connect them accordingly to the RX/TX pin of the TTL-USB converter. Note: my converter has its TX/RX label reversed for some version, so I have to connect TXD to TXD and RXD to RXD.

Connect Pin 1 to ground through a pushbutton. If you do not connect this button, you can still reset the device by removing the power and then power on.

# Software Preparation
Install toolchain and lpc21isp (Ubuntu/Debian)

{% highlight bash %}
apt-get install gcc-arm lpc21isp
{% endhighlight %}

Done!

# Prepare Source code base

## Just test hardware
Example Source Code if you like to just download and try: [00-Getting_Started.tar.xz]({{ site.baseurl/archives/00-Getting_Started.tar.xz }})

Unpack the file somewhere you can remember. Plug the TTL-USB cable in(with the breadboard, of course). Hold the reset button, then hold the ISP button. Please try to push the buttons in this sequence, otherwise if you have set the pin that connects to the ISP button to output and HIGH, think what would happend when you push that down before the controller is reset. Still holding ISP button, execute

	make flash

in the directory using UNIX command line(I assume you know how to do so). You should see something like this:

	lpc21isp main.hex /dev/ttyUSB0 115200 12000
	lpc21isp version 1.94
	File main.hex:
		loaded...
		converted to binary format...
		image size : 276
	Image size : 276
	Synchronizing (ESC to abort). OK
	Read bootcode version: 4
	13
	Read part ID: LPC810M021FN8, 4 kiB FLASH / 1 kiB SRAM (0x00008100)
	Will start programming at Sector 1 if possible, and conclude with Sector 0 to ensure that checksum is written last.
	Erasing sector 0 first, to invalidate checksum. OK 
	Sector 0: ..|.
	Download Finished... taking 0 seconds
	Now launching the brand new code

Then, press the reset button again. LED should blink.

## Starting from Scratch
In this section, I will explain the process of starting from scratch, and explain every details of the source code.

### Directory and Makefile
Make a new folder, say, `00-Getting_Started`. Create a `Makefile`:

{% highlight Makefile %}
{% include {{ code_root }}/Makefile %}
{% endhighlight %}

Of course, this is not the best Makefile in the world, but good enough for this series.

Then, create the folders and files referenced by the `Makefile`:

	mkdir -pv LPC810
	touch main.c crt0.S LPC810/lpc810.ld

### Main code
Here comes the main code(`main.c`):

{% highlight C linenos %}
{% include {{ code_root }}/main.c %}
{% endhighlight %}

There is nothing fancy. The special memory addresses are the device specific addresses to control hardware. In order to access those, the addresses are cast into volaile pointers. These addresses can be found under the *LPC81x User Manual*. The `PINENABLE0` address is found in *Chapter 9, LPC81x Switch Matrix*, the `DIR0` and `NOT0` addresses are under *Chapter 7, LPC81x GPIO Port*. I will only point the location in this tutorial, and I will not do so for the next ones.
First, the SWD related functions are disabled so that the LED pin has GPIO enabled:

	*(vp) 0x4000C1C0 = 0xFFFFFFBFUL;	/* PINENABLE0 register */

Then, `PIO0_2` is set to output mode:

	*(vp) 0xA0002000 |= 1 << 2;

In an infinite loop, the LED is toggled by writing to the `NOT0` register:

    *(vp) 0xA0002300 |= 1 << 2;	/* NOT0 register */

To slow down the blink enough, we just waste a lot of cycles doing nothing.

    volatile long wait = 240000;
    while (wait > 0) --wait;		/* WAIT */

That's it for the `main.c`. Simple. However, with only this source file, the linker can't know where to put the code in the executable. Therefore, we need to tell it where to put what. In the next section, I will talk about how we instruct the linker to correctly place code.

### Linker Script
Now let's look at  the `LPC810/lpc810.ld`.

{% highlight C linenos %}
{% include {{ code_root }}/LPC810/lpc810.ld %}
{% endhighlight %}

An executable is divided into multiple sections. Each section is placed into a storage device in the microcontroller. The starting address and size are documented in *81x Datasheet*, in section *Memory Map*. In our case, an LPC810 has 4K flash and 1K RAM, starting at address `0x00000000` and `0x10000000`, therefore, we have the following snippet of LD script(ignore the `ENTRY()` for now):

	MEMORY {
	    FLASH(rx) : ORIGIN = 0x0, LENGTH = 4K
	    RAM(rwx) : ORIGIN = 0x10000000, LENGTH = 1K
	}

This means there are two storage devices, `FLASH` and `RAM`. `FLASH` is **r**eadable and e**x**ecutable, while the RAM is **r**eadable, e**x**ecutable, and **w**ritable. `FLASH` starts at `0x0` and is `4KB` long, while `RAM` starts at `0x10000000` and is `1KB` long.

After storage devices are defined, we need to tell the linker specific information about where each sections go. Before explaining the script, we need to know some information about the Cortex-M0+ processor. In the *Cortex-M0+ Devices Generic User Guide*, section *2.3.4 Vector Table*, we see that a vector table comes at the very first of the memory address: `0x00000000`. It stores the initial stack pointer value, and then 15  **addresses** of the core Cortex-M0+ exception handlers. After that, there are device specific interrupt handler addresses. Note that since this is a 32 bit device, each address takes 4 bytes. According to the *LPC81x User Manual*(Will be abbreviated as *81X Manual*), section *3.3.1 Interrupt Sources*, there are 32 interrupt sources. Therefore, the first 48 `long`(4 bytes wide each) values are taken by the vector table, so the executable codes will go after them. In other words, the executable code starts at address $$(48+1)*4 = 0xC4$$.

Now we can look into the code.

    . = ORIGIN(FLASH);

This means the "current" address is set to the origin of `FLASH`. This line tells the linker to place code starting at this address.

    .text : {
        KEEP(* (.isr_vectors));
	. = ALIGN(4);
	. = 0xC4;		/* The end of vectors. Just for tutorial 0 */
	__vec_end__ = .;
	* (.text);
	. = ALIGN(4);
	__end_text__ = .;
    } > FLASH

`.text` is the target section that the code will be placed into. In order to make sure the vector table is *always* placed before anything, we make it a seperate section, in this case, `.isr_vectors`. The `KEEP` here is just telling the linker that it should never discard this section even if it is not referenced (affected by `-Wl,--gc-sections`). When source files are compiled, different object files are generated, `main.o` and `crt0.o` in this case. Now we go over the syntax even more carefully.

	* (.isr_vectors);

This means for all object files (indicated by wildcard `*`), copy the `.isr_vectors` section into the target address. In this case, `0x0`.

	. = ALIGN(4);

Since Cortex-M0+ is 32 bits, each instruction is 4 bytes wide. Therefore, we need to align the code to instructions before advancing to next section. If it is not aligned, the linker just appends `0x0` (that is an observation, not necessarily true).

	. = 0xC4;

This line is just for this tutorial because otherwise you have to type a whole list of 48 vectors and create 48 function definitions before you can even start blinking an LED. We all know from above that the actual executable starts at `0xC4`, so this is totally fine(and I have tested it, so really, it is fine). Of course, you can still keep this line for the next tutorials if you like.

	__vec_end__ = .;

This is just a symbol for use in source codes. `__vec_end__` will store the current address, and can be referenced by C or assembly code.

	* (.text)

This is the same meaning as before. Copy the `.text` section from each object file, put it in the executable.

	.text : {
	...
	} > FLASH

This means the target `.text` section will be put on the storage device `FLASH`.

    __stack_top = ORIGIN(RAM) + LENGTH(RAM);

This defines the begining of the stack, which locates at the end of RAM and grows towards the front.

Finally, we have some more symbols defined about the end of code. Now we come back to the first line:

	ENTRY(Reset_Handler)

This means the 'entry point' of the executable is the symbol `Reset_Handler`, i.e. when the device starts, the first executed instruction is at the address of symbol `Reset_Handler`. Note that `Reset_Handler` does *not* need to be a function, it can be any symbols(I think it needs to be global, though). Although I haven't tested it, a plain address should also work in this definition.

### Startup Code
Now we have the correct placement of the sections. However, we still need to write the vector table and the code to execute `main()`. After all, our entry point is `Reset_Handler`, not `main`. Let's look at `crt0.S`:

{% highlight gas linenos %}
{% include {{ code_root }}/crt0.S %}
{% endhighlight %}

First, we have something to tell the assembler:

	.syntax unified
	.thumb

This tells the assembler(GNU AS in this case) to use *Unified Assembler Language* and Thumb instructions.

Now we start with the vector table.

	.section .isr_vectors

This tells the assembler to place the later code into section `.isr_vectors`.

	.align

As it looks like, this tells the assembler to align code to 4 byte instructions.

	.long __stack_top
	.long Reset_Handler

This defines two long expressions. The first one contains the symbol `__stack_top`, defined in linker script. The second one contains the symbol `Reset_Handler`, which is defined later. Notice that the first `.long` takes the addresses `0x00` to `0x03`, and the second `.long` takes `0x04` to `0x07`. Recall the vector table in *Cortex-M0+ Devices Generic User Guide* (will be abbreviated as *CM0 Guide* from now on), the first long is indeed the initial stack pointer, while the second one is the address of the program counter after a reset. Since we already set the beginning of `.text` to be `0xC4`, we don't need to define all the other vectors. Convinient, right?

	.text

This means put the later code into the `.text` section. This line is the same as `.section .text`.

	.thumb_func

This line is needed for GNU AS to generate correct mix of Thumb/ARM instructions. I don't know a lot about this, but I know that if this line is omitted, the generated executable is incorrect.

	.global Reset_Handler

This line makes symbol `Reset_Handler` to be global, so that code from other source files can access this symbol.

	Reset_Handler:
	crt0:
		b main

Why do I have two symbols but nothing between? Because there will be some initialize code there for the next tutorials. These three lines are the minimal code to execute the `main()`. For newbies(like me), notice that the symbols don't take up memory, so the only line of code here is `b main`. As documented in both *CM0 Guide* and *81x Manual*, `B{cc} label` is the instruction for "Branch to <label> {conditionally}". In this case, "branch to label `main` unconditionally".

Now the startup code is finished. Do the same thing as compiling the example:

	make
	make flash

Don't forget to press the ISP button. Also don't forget to reset after programming.
